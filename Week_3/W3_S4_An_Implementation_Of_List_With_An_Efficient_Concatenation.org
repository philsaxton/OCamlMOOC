#+title: Week 3 Session 4: An Implementation Of List With An Efficient Concatenation
Concatenating two standard OCaml lists takes a time proportional to the length of the first list. In this exercise, we implement a data structure for lists with a constant time concatenation. 
The preludes gives a type 'a clist, which is either a single element of type 'a, the concatenation of two 'a clist or an empty 'a clist. This representation of a list is not linear: it is a tree-like datastructure since the CApp constructor contains two values of type 'a clist. The sequence of elements contained in a value of type 'a clist is obtained by a depth-first traversal of the tree. For instance, the example given in the prelude, of type int clist is a valid representation for the sequence [1;2;3;4].
1. Write a function to_list : 'a clist -> 'a list which computes the 'a list that contains the same elements as the input 'a clist, in the same order.
2. Write a function of_list : 'a list -> 'a clist which computes the 'a clist that contains the same elements as the input 'a list, in the same order.
3. Write a function append : 'a clist -> 'a clist -> 'a clist such that:
   1. append CEmpty l = append l CEmpty = l
   2. append l1 l2 = CApp (l1, l2) otherwise
4. Write a function hd : 'a clist -> 'a option that returns Some x where x is the first element of the input 'a clist, if it is not empty, and returns None otherwise.
5. Write a function tl : 'a clist -> 'a clist option that returns Some l where l is the input sequence without its first element, if this input sequence is not empty, or returns None otherwise.

The Given Prelude:
#+begin_src ocaml
type 'a clist =
  | CSingle of 'a
  | CApp of 'a clist * 'a clist
  | CEmpty

let example =
  CApp (CApp (CSingle 1,
              CSingle 2),
        CApp (CSingle 3,
              CApp (CSingle 4, CEmpty)));;
#+end_src
              
Answer:
#+begin_src ocaml
let to_list l =
  let rec aux l list = 
    match l with
    | CSingle a -> a :: list
    | CApp (x, y) -> aux x (aux y list)
    | CEmpty -> list
  in aux l [];;

let rec of_list l =
  match l with 
  | a :: b :: c-> CApp((CApp ((CSingle a), (CSingle b))), (of_list c))
  | a :: [] -> CApp ((CSingle a), CEmpty)
  | [] -> CEmpty;;

let append l1 l2 = 
  match (l1, l2) with
  | (x, CEmpty)
  | (CEmpty, x) -> x
  | (x, y) -> CApp (x, y);;

let hd l =
  match to_list l with 
  | []-> None
  | x :: y -> Some x;;

let tl l =
  match to_list l with 
  | [] -> None
  | a :: b -> Some (of_list b) ;;
#+end_src
