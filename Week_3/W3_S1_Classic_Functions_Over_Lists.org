#+title: Week 3 Session 1: Classic Functions Over Lists
In this exercise, we implement the classic functions over lists.
 1. Write a function mem : int -> int list -> bool such that mem x l is true if and only if x occurs in l.
 2. Write a function append : int list -> int list -> int list such that append l1 l2 is the concatenation of l1 and l2.
 3. Write a function combine : int list -> int list -> (int * int) list such that combine l1 l2 is the list of pairs obtained by joining the elements of l1 and l2. This function assumes that l1 and l2 have the same length. For instance, combine [1;2] [3;4] = [(1, 3); (2, 4)].
 4. Write a function assoc : (string * int) list -> string -> int option such that assoc l k = Some x if (k, x) is the first pair of l whose first component is k. If no such pair exists, assoc l k = None.

Answer: 
#+begin_src ocaml
let rec mem (x : int) (l : int list) =
  match l with 
  | [] -> false
  | h :: t -> if h = x then true else mem x t;;

let rec append (l1 : int list) (l2 : int list) = 
  match l1, l2 with
  | l1, [] -> l1
  | [], l2 -> l2
  | h1 :: t1, l2 -> h1 :: append t1 l2;; 

let rec combine (l1 : int list) (l2 : int list) =
  match l1, l2 with
  | [], _ -> []
  | _, [] -> []
  | h1::t1, h2::t2 -> (h1, h2) :: combine t1 t2;; 

let rec assoc (l : (string * int) list) (k : string) = 
  match l with 
  | [] -> None
  | (str, num) :: tl -> 
      if str = k
      then Some num
      else assoc tl k;; 
#+end_src
