#+title: Week 3 Session 4: Balanced Binary Trees
A binary tree t, of the 'a bt type given in the prelude, is either an empty tree, or the root of a tree with a value and two children subtrees.
 1. Write a function height : 'a bt -> int that computes the height of a tree.
 2. A tree is balanced if, for all internal node n, its two subtrees have the same height. Write a function balanced : 'a bt -> bool that tells if a tree is balanced.

The Given Prelude:
#+begin_src ocaml
type 'a bt =
  | Empty
  | Node of 'a bt * 'a * 'a bt ;;
#+end_src

Answer:
#+begin_src ocaml
let rec height t =
  match t with 
    Empty -> 0
  | Node (l, x, r) -> 1 + max (height l) (height r);;

let rec balanced t  = 
  match t with 
    Empty -> true
  | Node (l, x, r) -> 
      height l = height r 
      && balanced l
      && balanced r ;; 
#+end_src
